{"debug_symbols":[{"locations":{"192":[{"span":{"start":178,"end":207},"file":0}],"193":[{"span":{"start":220,"end":242},"file":0}],"194":[{"span":{"start":220,"end":242},"file":0}],"195":[{"span":{"start":220,"end":242},"file":0}],"196":[{"span":{"start":220,"end":242},"file":0}],"197":[{"span":{"start":220,"end":242},"file":0}],"198":[{"span":{"start":220,"end":242},"file":0}],"199":[{"span":{"start":220,"end":242},"file":0}],"200":[{"span":{"start":220,"end":242},"file":0}],"201":[{"span":{"start":220,"end":242},"file":0}],"202":[{"span":{"start":220,"end":242},"file":0}],"203":[{"span":{"start":220,"end":242},"file":0}],"204":[{"span":{"start":220,"end":242},"file":0}],"205":[{"span":{"start":220,"end":242},"file":0}],"206":[{"span":{"start":220,"end":242},"file":0}],"207":[{"span":{"start":220,"end":242},"file":0}],"208":[{"span":{"start":220,"end":242},"file":0}],"209":[{"span":{"start":220,"end":242},"file":0}],"210":[{"span":{"start":220,"end":242},"file":0}],"211":[{"span":{"start":220,"end":242},"file":0}],"212":[{"span":{"start":220,"end":242},"file":0}],"213":[{"span":{"start":220,"end":242},"file":0}],"214":[{"span":{"start":220,"end":242},"file":0}],"215":[{"span":{"start":220,"end":242},"file":0}],"216":[{"span":{"start":220,"end":242},"file":0}],"217":[{"span":{"start":220,"end":242},"file":0}],"218":[{"span":{"start":220,"end":242},"file":0}],"219":[{"span":{"start":220,"end":242},"file":0}],"220":[{"span":{"start":220,"end":242},"file":0}],"221":[{"span":{"start":220,"end":242},"file":0}],"222":[{"span":{"start":220,"end":242},"file":0}],"223":[{"span":{"start":220,"end":242},"file":0}],"224":[{"span":{"start":220,"end":242},"file":0}],"225":[{"span":{"start":264,"end":344},"file":0}],"226":[{"span":{"start":357,"end":372},"file":0}]}}],"file_map":{"0":{"source":"use dep::std;\n\nfn main(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64],\n    message: pub [u8; 32],\n    pub_key_x_hash: pub [u8; 32]\n) {\n    let hash = std::hash::blake2s(pub_key_x);\n    assert(hash == pub_key_x_hash);\n\n    let isValid = std::ecdsa_secp256r1::verify_signature(pub_key_x, pub_key_y, signature, message);\n    assert(isValid == true);\n}\n\n#[test]\nfn test_main() {\n    let pubkey_x:[u8;32] = [\n        141, 220, 47, 86, 157, 163, 5, 233,\n        205, 213, 105, 38, 197, 250, 168, 14,\n        136, 151, 12, 9, 120, 59, 206, 222,\n        0, 240, 194, 239, 248, 160, 103, 97\n    ];\n\n    let pubkey_y:[u8;32] = [\n        245, 202, 106, 220, 162, 23, 124,\n        156, 131, 69, 84, 79, 247, 230,\n        217, 201, 129, 127, 37, 252, 183,\n        115, 106, 179, 222, 21, 59, 177,\n        142, 114, 76, 43\n    ];\n\n    let signature:[u8;64] = [\n        110, 136, 209, 242, 119, 184, 245, 2, 169, 89, 198,\n        202, 91, 197, 12, 231, 176, 85, 7, 213, 159, 56,\n        47, 92, 243, 15, 149, 191, 98, 199, 175, 134, 2,\n        65, 139, 92, 32, 7, 198, 91, 103, 48, 122, 138,\n        7, 162, 138, 137, 180, 246, 136, 13, 140, 240, 100,\n        160, 1, 217, 179, 223, 52, 53, 106, 194\n    ];\n\n    let message:[u8;32] = [\n        188, 156, 3, 200, 39, 80, 125,\n        215, 200, 164, 195, 224, 156, 221,\n        246, 140, 199, 211, 226, 90, 95,\n        181, 250, 151, 149, 172, 253, 74,\n        143, 134, 164, 135\n    ];\n\n    let pubkey_x_hash:[u8;32] = [\n        0x00000000000000000000000000000000000000000000000000000000000000b0, 0x00000000000000000000000000000000000000000000000000000000000000a5, 0x0000000000000000000000000000000000000000000000000000000000000096, 0x00000000000000000000000000000000000000000000000000000000000000ba, 0x0000000000000000000000000000000000000000000000000000000000000065, 0x00000000000000000000000000000000000000000000000000000000000000a5, 0x0000000000000000000000000000000000000000000000000000000000000012, 0x000000000000000000000000000000000000000000000000000000000000000f, 0x000000000000000000000000000000000000000000000000000000000000008d, 0x0000000000000000000000000000000000000000000000000000000000000075, 0x000000000000000000000000000000000000000000000000000000000000002f, 0x0000000000000000000000000000000000000000000000000000000000000062, 0x00000000000000000000000000000000000000000000000000000000000000e2, 0x0000000000000000000000000000000000000000000000000000000000000038, 0x0000000000000000000000000000000000000000000000000000000000000053, 0x0000000000000000000000000000000000000000000000000000000000000063, 0x00000000000000000000000000000000000000000000000000000000000000e3, 0x00000000000000000000000000000000000000000000000000000000000000e0, 0x0000000000000000000000000000000000000000000000000000000000000082, 0x0000000000000000000000000000000000000000000000000000000000000005, 0x0000000000000000000000000000000000000000000000000000000000000031, 0x00000000000000000000000000000000000000000000000000000000000000c6, 0x00000000000000000000000000000000000000000000000000000000000000d5, 0x0000000000000000000000000000000000000000000000000000000000000044, 0x0000000000000000000000000000000000000000000000000000000000000015, 0x0000000000000000000000000000000000000000000000000000000000000060, 0x00000000000000000000000000000000000000000000000000000000000000c9, 0x000000000000000000000000000000000000000000000000000000000000009a, 0x000000000000000000000000000000000000000000000000000000000000006b, 0x000000000000000000000000000000000000000000000000000000000000003c, 0x000000000000000000000000000000000000000000000000000000000000007c, 0x0000000000000000000000000000000000000000000000000000000000000061\n    ];\n    main(pubkey_x, pubkey_y, signature, message, pubkey_x_hash);\n}\n","path":"/Users/anoy/Documents/Hackathon Projects/Luna_CircuitBreaker/circuits/passkey_prove/src/main.nr"}},"warnings":[]}