use dep::std;

fn main(
    pub_key_x: [u8; 32],
    pub_key_y: [u8; 32],
    signature: [u8; 64],
    message: pub [u8; 32],
    pub_key_x_hash: pub [u8; 32]
) {
    let hash = std::hash::blake2s(pub_key_x);
    assert(hash == pub_key_x_hash);

    let isValid = std::ecdsa_secp256r1::verify_signature(pub_key_x, pub_key_y, signature, message);
    assert(isValid == true);
}

#[test]
fn test_main() {
    let pubkey_x:[u8;32] = [
        141, 220, 47, 86, 157, 163, 5, 233,
        205, 213, 105, 38, 197, 250, 168, 14,
        136, 151, 12, 9, 120, 59, 206, 222,
        0, 240, 194, 239, 248, 160, 103, 97
    ];

    let pubkey_y:[u8;32] = [
        245, 202, 106, 220, 162, 23, 124,
        156, 131, 69, 84, 79, 247, 230,
        217, 201, 129, 127, 37, 252, 183,
        115, 106, 179, 222, 21, 59, 177,
        142, 114, 76, 43
    ];

    let signature:[u8;64] = [
        110, 136, 209, 242, 119, 184, 245, 2, 169, 89, 198,
        202, 91, 197, 12, 231, 176, 85, 7, 213, 159, 56,
        47, 92, 243, 15, 149, 191, 98, 199, 175, 134, 2,
        65, 139, 92, 32, 7, 198, 91, 103, 48, 122, 138,
        7, 162, 138, 137, 180, 246, 136, 13, 140, 240, 100,
        160, 1, 217, 179, 223, 52, 53, 106, 194
    ];

    let message:[u8;32] = [
        188, 156, 3, 200, 39, 80, 125,
        215, 200, 164, 195, 224, 156, 221,
        246, 140, 199, 211, 226, 90, 95,
        181, 250, 151, 149, 172, 253, 74,
        143, 134, 164, 135
    ];

    let pubkey_x_hash:[u8;32] = [
        0x00000000000000000000000000000000000000000000000000000000000000b0, 0x00000000000000000000000000000000000000000000000000000000000000a5, 0x0000000000000000000000000000000000000000000000000000000000000096, 0x00000000000000000000000000000000000000000000000000000000000000ba, 0x0000000000000000000000000000000000000000000000000000000000000065, 0x00000000000000000000000000000000000000000000000000000000000000a5, 0x0000000000000000000000000000000000000000000000000000000000000012, 0x000000000000000000000000000000000000000000000000000000000000000f, 0x000000000000000000000000000000000000000000000000000000000000008d, 0x0000000000000000000000000000000000000000000000000000000000000075, 0x000000000000000000000000000000000000000000000000000000000000002f, 0x0000000000000000000000000000000000000000000000000000000000000062, 0x00000000000000000000000000000000000000000000000000000000000000e2, 0x0000000000000000000000000000000000000000000000000000000000000038, 0x0000000000000000000000000000000000000000000000000000000000000053, 0x0000000000000000000000000000000000000000000000000000000000000063, 0x00000000000000000000000000000000000000000000000000000000000000e3, 0x00000000000000000000000000000000000000000000000000000000000000e0, 0x0000000000000000000000000000000000000000000000000000000000000082, 0x0000000000000000000000000000000000000000000000000000000000000005, 0x0000000000000000000000000000000000000000000000000000000000000031, 0x00000000000000000000000000000000000000000000000000000000000000c6, 0x00000000000000000000000000000000000000000000000000000000000000d5, 0x0000000000000000000000000000000000000000000000000000000000000044, 0x0000000000000000000000000000000000000000000000000000000000000015, 0x0000000000000000000000000000000000000000000000000000000000000060, 0x00000000000000000000000000000000000000000000000000000000000000c9, 0x000000000000000000000000000000000000000000000000000000000000009a, 0x000000000000000000000000000000000000000000000000000000000000006b, 0x000000000000000000000000000000000000000000000000000000000000003c, 0x000000000000000000000000000000000000000000000000000000000000007c, 0x0000000000000000000000000000000000000000000000000000000000000061
    ];
    main(pubkey_x, pubkey_y, signature, message, pubkey_x_hash);
}
